{{- if include "fybrik.isEnabled" (tuple .Values.manager.enabled (or .Values.coordinator.enabled .Values.worker.enabled)) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: manager
  labels:
    control-plane: controller-manager
    app.kubernetes.io/component: manager
    {{- include "fybrik.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.manager.replicaCount }}
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/component: manager
      {{- include "fybrik.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if .Values.manager.podAnnotations }}
      annotations:
      {{- .Values.manager.podAnnotations | toYaml | nindent 8 }}
      {{- end }}
      labels:
        control-plane: controller-manager
        fybrik.io/componentType: manager
        app.kubernetes.io/component: manager
        {{- include "fybrik.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.manager.serviceAccount.name }}
      securityContext:
        {{- include "fybrik.processPodSecurityContext" (dict "context" . "podSecurityContext" .Values.manager.podSecurityContext) | nindent 8 }}
      {{- if .Values.manager.solver.image }}
      initContainers:
        - name: init-solver
          image: {{ .Values.manager.solver.image }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command:
          - cp 
          - -rf
          - /data/tools
          - {{ include "fybrik.getDataSubdir" ( tuple "solver" ) }}/
          volumeMounts:
            - name: solver-volume
              mountPath: {{ include "fybrik.getDataSubdir" ( tuple "solver" ) }}
      {{- end }}
      containers:
        {{- if .Values.manager.socat }}
        - name: integration-tests
          image: alpine/socat:latest
          command:
          - socat
          - TCP4-LISTEN:5000,fork
          - TCP4:kind-registry:5000
        {{- end }}
        {{- if and .Values.clusterScoped .Values.manager.prometheus }}
        - name: kube-rbac-proxy
          image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
          args:
            - "--secure-listen-address=0.0.0.0:8443"
            - "--upstream=http://127.0.0.1:8080/"
            - "--logtostderr=true"
            - "--v=10"
          ports:
          - containerPort: 8443
            name: https
        {{- end }}
        {{ if .Values.storageManager.image }}
        - name: storage-manager
          image: {{ include "fybrik.image" ( tuple $ .Values.storageManager ) }}
          imagePullPolicy: {{ .Values.manager.imagePullPolicy | default .Values.global.imagePullPolicy }}
          ports:
          - containerPort: {{ .Values.storageManager.serverPort }}
            name: storage-manager
          env:
          - name: SERVER_PORT
            value: {{ .Values.storageManager.serverPort | quote }}
        {{- end }}
        - name: manager
          image: {{ include "fybrik.image" ( tuple $ .Values.manager ) }}
          imagePullPolicy: {{ .Values.manager.imagePullPolicy | default .Values.global.imagePullPolicy }}
          args:
            {{- if .Values.manager.overrideArgs }}
            {{- toYaml .Values.manager.overrideArgs | nindent 12 }}
            {{- else }}
            {{- if and .Values.clusterScoped .Values.manager.prometheus }}
            - "--metrics-bind-addr=:8080"
            {{- end }}
            - "--health-probe-addr=:8088"
            - "--leader-elect"
            {{- if .Values.coordinator.enabled }}
            - "--enable-application-controller"
            - "--enable-plotter-controller"
            {{- end }}
            {{- if .Values.worker.enabled }}
            - "--enable-blueprint-controller"
            {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: fybrik-config
            - configMapRef:
                name: cluster-metadata
            {{- if include "fybrik.isRazeeConfigurationEnabled" . }}
            - secretRef:
                name: razee-credentials
            {{- end }}
          env:
            - name: DATA_DIR
              value: {{ include "fybrik.getDataDir" . }}
            - name: ENABLE_WEBHOOKS
            {{- if .Values.clusterScoped }} 
              value: "true"
            {{- else }}
              value: "false"
            {{- end }}
            - name: MODULES_NAMESPACE
              value: {{ include "fybrik.getModulesNamespace" . }}
              
            {{- if .Values.manager.solver.image }}
            - name: CSP_PATH
              value: {{ include "fybrik.getDataSubdir" ( tuple "solver" ) }}/tools/bin/solver
            {{- end }}

            {{- if .Values.applicationNamespace }}
            - name: APPLICATION_NAMESPACE
              value: {{ .Values.applicationNamespace }}
            {{- end }}
            {{- if .Values.manager.extraEnvs }}
            {{- toYaml .Values.manager.extraEnvs | nindent 12 }}
            {{- end }}
            {{- if .Values.manager.chartsPersistentVolumeClaim }}
            - name: LOCAL_CHARTS_DIR
              value: {{ include "fybrik.localChartsMountPath" . }}
            {{- end }}
          {{- if .Values.clusterScoped }} 
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          {{- end }}
          readinessProbe:
          {{- mergeOverwrite (deepCopy .Values.global.readinessProbe) .Values.manager.readinessProbe | toYaml | nindent 12 }}
            httpGet:
              path: /readyz
              port: 8088
          livenessProbe:
          {{- mergeOverwrite (deepCopy .Values.global.livenessProbe) .Values.manager.livenessProbe | toYaml | nindent 12 }}
            httpGet:
              path: /healthz
              port: 8088
          volumeMounts:
            - name: data
              mountPath: {{ include "fybrik.getDataDir" . }}
           {{- if .Values.clusterScoped }}
            - mountPath: {{ include "fybrik.getDataSubdir" (tuple "k8s-webhook-server" ) }}
              name: webhook-cert
              readOnly: true
            {{- end }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "taxonomy" ) }}
              name: fybrik-taxonomy
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "adminconfig" ) }}
              name: fybrik-adminconfig
            {{- if .Values.manager.solver.image }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "solver" ) }}
              name: solver-volume
            {{- end }}
            {{- if .Values.manager.chartsPersistentVolumeClaim }}
            - mountPath: {{ include "fybrik.localChartsMountPath" . }}
              name: charts
            {{- end }}
            {{- if .Values.manager.tls.certs.certSecretName }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "tls-cert" ) }}
              name: tls-cert
              readOnly: true
            {{- end }}
            {{- if .Values.manager.tls.certs.cacertSecretName }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "tls-cacert" ) }}
              name: tls-cacert
              readOnly: true
            {{- end }}
          securityContext:
          {{- mergeOverwrite (deepCopy .Values.global.containerSecurityContext) .Values.manager.containerSecurityContext | toYaml | nindent 12 }}
          resources:
            {{- toYaml .Values.manager.resources | nindent 12 }}
      terminationGracePeriodSeconds: 10
      volumes:
        {{- if .Values.clusterScoped }}
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: webhook-server-cert
        {{- end }}
        {{- if .Values.manager.solver.image }}
        - name: solver-volume
          emptyDir:
            sizeLimit: {{ .Values.manager.solver.dirSizeLimit }}
        {{- end }}
        - name: data
          emptyDir:
            sizeLimit: {{ .Values.manager.dataDirSizeLimit }}
        - name: fybrik-taxonomy
          configMap:
            name: fybrik-taxonomy-config
        - name: fybrik-adminconfig
          configMap:
            name: fybrik-adminconfig
        {{- if .Values.manager.chartsPersistentVolumeClaim }}
        - name: charts
          persistentVolumeClaim:
            claimName: "{{ .Values.manager.chartsPersistentVolumeClaim }}"
        {{- end }}
        {{- if .Values.manager.tls.certs.certSecretName }}
        - name: tls-cert
          secret:
            defaultMode: 420
            secretName: {{ .Values.manager.tls.certs.certSecretName }}
        {{- end }}
        {{- if .Values.manager.tls.certs.cacertSecretName }}
        - name: tls-cacert
          secret:
            defaultMode: 420
            secretName: {{ .Values.manager.tls.certs.cacertSecretName }}
        {{- end }}
      {{- with .Values.manager.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.manager.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.manager.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
